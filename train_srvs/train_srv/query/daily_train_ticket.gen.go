// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newDailyTrainTicket(db *gorm.DB, opts ...gen.DOOption) dailyTrainTicket {
	_dailyTrainTicket := dailyTrainTicket{}

	_dailyTrainTicket.dailyTrainTicketDo.UseDB(db, opts...)
	_dailyTrainTicket.dailyTrainTicketDo.UseModel(&model.DailyTrainTicket{})

	tableName := _dailyTrainTicket.dailyTrainTicketDo.TableName()
	_dailyTrainTicket.ALL = field.NewAsterisk(tableName)
	_dailyTrainTicket.ID = field.NewInt64(tableName, "id")
	_dailyTrainTicket.Date = field.NewTime(tableName, "date")
	_dailyTrainTicket.TrainCode = field.NewString(tableName, "train_code")
	_dailyTrainTicket.Start = field.NewString(tableName, "start")
	_dailyTrainTicket.StartPinyin = field.NewString(tableName, "start_pinyin")
	_dailyTrainTicket.StartTime = field.NewTime(tableName, "start_time")
	_dailyTrainTicket.StartIndex = field.NewInt32(tableName, "start_index")
	_dailyTrainTicket.End = field.NewString(tableName, "end")
	_dailyTrainTicket.EndPinyin = field.NewString(tableName, "end_pinyin")
	_dailyTrainTicket.EndTime = field.NewTime(tableName, "end_time")
	_dailyTrainTicket.EndIndex = field.NewInt32(tableName, "end_index")
	_dailyTrainTicket.FirstClassLast = field.NewInt32(tableName, "first_class_last")
	_dailyTrainTicket.FirstClassPrice = field.NewFloat64(tableName, "first_class_price")
	_dailyTrainTicket.SecondClassLast = field.NewInt32(tableName, "second_class_last")
	_dailyTrainTicket.SecondClassPrice = field.NewFloat64(tableName, "second_class_price")
	_dailyTrainTicket.SoftBerthLast = field.NewInt32(tableName, "soft_berth_last")
	_dailyTrainTicket.SoftBerthPrice = field.NewFloat64(tableName, "soft_berth_price")
	_dailyTrainTicket.HardBerthLast = field.NewInt32(tableName, "hard_berth_last")
	_dailyTrainTicket.HardBerthPrice = field.NewFloat64(tableName, "hard_berth_price")
	_dailyTrainTicket.CreateTime = field.NewTime(tableName, "create_time")
	_dailyTrainTicket.UpdateTime = field.NewTime(tableName, "update_time")

	_dailyTrainTicket.fillFieldMap()

	return _dailyTrainTicket
}

type dailyTrainTicket struct {
	dailyTrainTicketDo

	ALL              field.Asterisk
	ID               field.Int64   // id
	Date             field.Time    // 日期
	TrainCode        field.String  // 车次编号
	Start            field.String  // 出发站
	StartPinyin      field.String  // 出发站拼音
	StartTime        field.Time    // 出发时间
	StartIndex       field.Int32   // 出发站序|本站是整个车次的第几站
	End              field.String  // 到达站
	EndPinyin        field.String  // 到达站拼音
	EndTime          field.Time    // 到站时间
	EndIndex         field.Int32   // 到站站序|本站是整个车次的第几站
	FirstClassLast   field.Int32   // 一等座余票
	FirstClassPrice  field.Float64 // 一等座票价
	SecondClassLast  field.Int32   // 二等座余票
	SecondClassPrice field.Float64 // 二等座票价
	SoftBerthLast    field.Int32   // 软卧余票
	SoftBerthPrice   field.Float64 // 软卧票价
	HardBerthLast    field.Int32   // 硬卧余票
	HardBerthPrice   field.Float64 // 硬卧票价
	CreateTime       field.Time    // 新增时间
	UpdateTime       field.Time    // 修改时间

	fieldMap map[string]field.Expr
}

func (d dailyTrainTicket) Table(newTableName string) *dailyTrainTicket {
	d.dailyTrainTicketDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyTrainTicket) As(alias string) *dailyTrainTicket {
	d.dailyTrainTicketDo.DO = *(d.dailyTrainTicketDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyTrainTicket) updateTableName(table string) *dailyTrainTicket {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Date = field.NewTime(table, "date")
	d.TrainCode = field.NewString(table, "train_code")
	d.Start = field.NewString(table, "start")
	d.StartPinyin = field.NewString(table, "start_pinyin")
	d.StartTime = field.NewTime(table, "start_time")
	d.StartIndex = field.NewInt32(table, "start_index")
	d.End = field.NewString(table, "end")
	d.EndPinyin = field.NewString(table, "end_pinyin")
	d.EndTime = field.NewTime(table, "end_time")
	d.EndIndex = field.NewInt32(table, "end_index")
	d.FirstClassLast = field.NewInt32(table, "first_class_last")
	d.FirstClassPrice = field.NewFloat64(table, "first_class_price")
	d.SecondClassLast = field.NewInt32(table, "second_class_last")
	d.SecondClassPrice = field.NewFloat64(table, "second_class_price")
	d.SoftBerthLast = field.NewInt32(table, "soft_berth_last")
	d.SoftBerthPrice = field.NewFloat64(table, "soft_berth_price")
	d.HardBerthLast = field.NewInt32(table, "hard_berth_last")
	d.HardBerthPrice = field.NewFloat64(table, "hard_berth_price")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")

	d.fillFieldMap()

	return d
}

func (d *dailyTrainTicket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyTrainTicket) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 21)
	d.fieldMap["id"] = d.ID
	d.fieldMap["date"] = d.Date
	d.fieldMap["train_code"] = d.TrainCode
	d.fieldMap["start"] = d.Start
	d.fieldMap["start_pinyin"] = d.StartPinyin
	d.fieldMap["start_time"] = d.StartTime
	d.fieldMap["start_index"] = d.StartIndex
	d.fieldMap["end"] = d.End
	d.fieldMap["end_pinyin"] = d.EndPinyin
	d.fieldMap["end_time"] = d.EndTime
	d.fieldMap["end_index"] = d.EndIndex
	d.fieldMap["first_class_last"] = d.FirstClassLast
	d.fieldMap["first_class_price"] = d.FirstClassPrice
	d.fieldMap["second_class_last"] = d.SecondClassLast
	d.fieldMap["second_class_price"] = d.SecondClassPrice
	d.fieldMap["soft_berth_last"] = d.SoftBerthLast
	d.fieldMap["soft_berth_price"] = d.SoftBerthPrice
	d.fieldMap["hard_berth_last"] = d.HardBerthLast
	d.fieldMap["hard_berth_price"] = d.HardBerthPrice
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
}

func (d dailyTrainTicket) clone(db *gorm.DB) dailyTrainTicket {
	d.dailyTrainTicketDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyTrainTicket) replaceDB(db *gorm.DB) dailyTrainTicket {
	d.dailyTrainTicketDo.ReplaceDB(db)
	return d
}

type dailyTrainTicketDo struct{ gen.DO }

type IDailyTrainTicketDo interface {
	gen.SubQuery
	Debug() IDailyTrainTicketDo
	WithContext(ctx context.Context) IDailyTrainTicketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyTrainTicketDo
	WriteDB() IDailyTrainTicketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyTrainTicketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyTrainTicketDo
	Not(conds ...gen.Condition) IDailyTrainTicketDo
	Or(conds ...gen.Condition) IDailyTrainTicketDo
	Select(conds ...field.Expr) IDailyTrainTicketDo
	Where(conds ...gen.Condition) IDailyTrainTicketDo
	Order(conds ...field.Expr) IDailyTrainTicketDo
	Distinct(cols ...field.Expr) IDailyTrainTicketDo
	Omit(cols ...field.Expr) IDailyTrainTicketDo
	Join(table schema.Tabler, on ...field.Expr) IDailyTrainTicketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainTicketDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainTicketDo
	Group(cols ...field.Expr) IDailyTrainTicketDo
	Having(conds ...gen.Condition) IDailyTrainTicketDo
	Limit(limit int) IDailyTrainTicketDo
	Offset(offset int) IDailyTrainTicketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainTicketDo
	Unscoped() IDailyTrainTicketDo
	Create(values ...*model.DailyTrainTicket) error
	CreateInBatches(values []*model.DailyTrainTicket, batchSize int) error
	Save(values ...*model.DailyTrainTicket) error
	First() (*model.DailyTrainTicket, error)
	Take() (*model.DailyTrainTicket, error)
	Last() (*model.DailyTrainTicket, error)
	Find() ([]*model.DailyTrainTicket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainTicket, err error)
	FindInBatches(result *[]*model.DailyTrainTicket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyTrainTicket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyTrainTicketDo
	Assign(attrs ...field.AssignExpr) IDailyTrainTicketDo
	Joins(fields ...field.RelationField) IDailyTrainTicketDo
	Preload(fields ...field.RelationField) IDailyTrainTicketDo
	FirstOrInit() (*model.DailyTrainTicket, error)
	FirstOrCreate() (*model.DailyTrainTicket, error)
	FindByPage(offset int, limit int) (result []*model.DailyTrainTicket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyTrainTicketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyTrainTicketDo) Debug() IDailyTrainTicketDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyTrainTicketDo) WithContext(ctx context.Context) IDailyTrainTicketDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyTrainTicketDo) ReadDB() IDailyTrainTicketDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyTrainTicketDo) WriteDB() IDailyTrainTicketDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyTrainTicketDo) Session(config *gorm.Session) IDailyTrainTicketDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyTrainTicketDo) Clauses(conds ...clause.Expression) IDailyTrainTicketDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyTrainTicketDo) Returning(value interface{}, columns ...string) IDailyTrainTicketDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyTrainTicketDo) Not(conds ...gen.Condition) IDailyTrainTicketDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyTrainTicketDo) Or(conds ...gen.Condition) IDailyTrainTicketDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyTrainTicketDo) Select(conds ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyTrainTicketDo) Where(conds ...gen.Condition) IDailyTrainTicketDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyTrainTicketDo) Order(conds ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyTrainTicketDo) Distinct(cols ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyTrainTicketDo) Omit(cols ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyTrainTicketDo) Join(table schema.Tabler, on ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyTrainTicketDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyTrainTicketDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyTrainTicketDo) Group(cols ...field.Expr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyTrainTicketDo) Having(conds ...gen.Condition) IDailyTrainTicketDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyTrainTicketDo) Limit(limit int) IDailyTrainTicketDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyTrainTicketDo) Offset(offset int) IDailyTrainTicketDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyTrainTicketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainTicketDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyTrainTicketDo) Unscoped() IDailyTrainTicketDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyTrainTicketDo) Create(values ...*model.DailyTrainTicket) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyTrainTicketDo) CreateInBatches(values []*model.DailyTrainTicket, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyTrainTicketDo) Save(values ...*model.DailyTrainTicket) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyTrainTicketDo) First() (*model.DailyTrainTicket, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainTicket), nil
	}
}

func (d dailyTrainTicketDo) Take() (*model.DailyTrainTicket, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainTicket), nil
	}
}

func (d dailyTrainTicketDo) Last() (*model.DailyTrainTicket, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainTicket), nil
	}
}

func (d dailyTrainTicketDo) Find() ([]*model.DailyTrainTicket, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyTrainTicket), err
}

func (d dailyTrainTicketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainTicket, err error) {
	buf := make([]*model.DailyTrainTicket, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyTrainTicketDo) FindInBatches(result *[]*model.DailyTrainTicket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyTrainTicketDo) Attrs(attrs ...field.AssignExpr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyTrainTicketDo) Assign(attrs ...field.AssignExpr) IDailyTrainTicketDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyTrainTicketDo) Joins(fields ...field.RelationField) IDailyTrainTicketDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyTrainTicketDo) Preload(fields ...field.RelationField) IDailyTrainTicketDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyTrainTicketDo) FirstOrInit() (*model.DailyTrainTicket, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainTicket), nil
	}
}

func (d dailyTrainTicketDo) FirstOrCreate() (*model.DailyTrainTicket, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainTicket), nil
	}
}

func (d dailyTrainTicketDo) FindByPage(offset int, limit int) (result []*model.DailyTrainTicket, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyTrainTicketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyTrainTicketDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyTrainTicketDo) Delete(models ...*model.DailyTrainTicket) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyTrainTicketDo) withDO(do gen.Dao) *dailyTrainTicketDo {
	d.DO = *do.(*gen.DO)
	return d
}
