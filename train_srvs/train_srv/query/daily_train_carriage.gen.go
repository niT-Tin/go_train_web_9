// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newDailyTrainCarriage(db *gorm.DB, opts ...gen.DOOption) dailyTrainCarriage {
	_dailyTrainCarriage := dailyTrainCarriage{}

	_dailyTrainCarriage.dailyTrainCarriageDo.UseDB(db, opts...)
	_dailyTrainCarriage.dailyTrainCarriageDo.UseModel(&model.DailyTrainCarriage{})

	tableName := _dailyTrainCarriage.dailyTrainCarriageDo.TableName()
	_dailyTrainCarriage.ALL = field.NewAsterisk(tableName)
	_dailyTrainCarriage.ID = field.NewInt64(tableName, "id")
	_dailyTrainCarriage.Date = field.NewTime(tableName, "date")
	_dailyTrainCarriage.TrainCode = field.NewString(tableName, "train_code")
	_dailyTrainCarriage.Index = field.NewInt32(tableName, "index")
	_dailyTrainCarriage.SeatType = field.NewString(tableName, "seat_type")
	_dailyTrainCarriage.SeatCount = field.NewInt32(tableName, "seat_count")
	_dailyTrainCarriage.RowCount = field.NewInt32(tableName, "row_count")
	_dailyTrainCarriage.ColCount = field.NewInt32(tableName, "col_count")
	_dailyTrainCarriage.CreateTime = field.NewTime(tableName, "create_time")
	_dailyTrainCarriage.UpdateTime = field.NewTime(tableName, "update_time")

	_dailyTrainCarriage.fillFieldMap()

	return _dailyTrainCarriage
}

type dailyTrainCarriage struct {
	dailyTrainCarriageDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	Date       field.Time   // 日期
	TrainCode  field.String // 车次编号
	Index      field.Int32  // 箱序
	SeatType   field.String // 座位类型|枚举[SeatTypeEnum]
	SeatCount  field.Int32  // 座位数
	RowCount   field.Int32  // 排数
	ColCount   field.Int32  // 列数
	CreateTime field.Time   // 新增时间
	UpdateTime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (d dailyTrainCarriage) Table(newTableName string) *dailyTrainCarriage {
	d.dailyTrainCarriageDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyTrainCarriage) As(alias string) *dailyTrainCarriage {
	d.dailyTrainCarriageDo.DO = *(d.dailyTrainCarriageDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyTrainCarriage) updateTableName(table string) *dailyTrainCarriage {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Date = field.NewTime(table, "date")
	d.TrainCode = field.NewString(table, "train_code")
	d.Index = field.NewInt32(table, "index")
	d.SeatType = field.NewString(table, "seat_type")
	d.SeatCount = field.NewInt32(table, "seat_count")
	d.RowCount = field.NewInt32(table, "row_count")
	d.ColCount = field.NewInt32(table, "col_count")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")

	d.fillFieldMap()

	return d
}

func (d *dailyTrainCarriage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyTrainCarriage) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.ID
	d.fieldMap["date"] = d.Date
	d.fieldMap["train_code"] = d.TrainCode
	d.fieldMap["index"] = d.Index
	d.fieldMap["seat_type"] = d.SeatType
	d.fieldMap["seat_count"] = d.SeatCount
	d.fieldMap["row_count"] = d.RowCount
	d.fieldMap["col_count"] = d.ColCount
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
}

func (d dailyTrainCarriage) clone(db *gorm.DB) dailyTrainCarriage {
	d.dailyTrainCarriageDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyTrainCarriage) replaceDB(db *gorm.DB) dailyTrainCarriage {
	d.dailyTrainCarriageDo.ReplaceDB(db)
	return d
}

type dailyTrainCarriageDo struct{ gen.DO }

type IDailyTrainCarriageDo interface {
	gen.SubQuery
	Debug() IDailyTrainCarriageDo
	WithContext(ctx context.Context) IDailyTrainCarriageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyTrainCarriageDo
	WriteDB() IDailyTrainCarriageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyTrainCarriageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyTrainCarriageDo
	Not(conds ...gen.Condition) IDailyTrainCarriageDo
	Or(conds ...gen.Condition) IDailyTrainCarriageDo
	Select(conds ...field.Expr) IDailyTrainCarriageDo
	Where(conds ...gen.Condition) IDailyTrainCarriageDo
	Order(conds ...field.Expr) IDailyTrainCarriageDo
	Distinct(cols ...field.Expr) IDailyTrainCarriageDo
	Omit(cols ...field.Expr) IDailyTrainCarriageDo
	Join(table schema.Tabler, on ...field.Expr) IDailyTrainCarriageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainCarriageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainCarriageDo
	Group(cols ...field.Expr) IDailyTrainCarriageDo
	Having(conds ...gen.Condition) IDailyTrainCarriageDo
	Limit(limit int) IDailyTrainCarriageDo
	Offset(offset int) IDailyTrainCarriageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainCarriageDo
	Unscoped() IDailyTrainCarriageDo
	Create(values ...*model.DailyTrainCarriage) error
	CreateInBatches(values []*model.DailyTrainCarriage, batchSize int) error
	Save(values ...*model.DailyTrainCarriage) error
	First() (*model.DailyTrainCarriage, error)
	Take() (*model.DailyTrainCarriage, error)
	Last() (*model.DailyTrainCarriage, error)
	Find() ([]*model.DailyTrainCarriage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainCarriage, err error)
	FindInBatches(result *[]*model.DailyTrainCarriage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyTrainCarriage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyTrainCarriageDo
	Assign(attrs ...field.AssignExpr) IDailyTrainCarriageDo
	Joins(fields ...field.RelationField) IDailyTrainCarriageDo
	Preload(fields ...field.RelationField) IDailyTrainCarriageDo
	FirstOrInit() (*model.DailyTrainCarriage, error)
	FirstOrCreate() (*model.DailyTrainCarriage, error)
	FindByPage(offset int, limit int) (result []*model.DailyTrainCarriage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyTrainCarriageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyTrainCarriageDo) Debug() IDailyTrainCarriageDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyTrainCarriageDo) WithContext(ctx context.Context) IDailyTrainCarriageDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyTrainCarriageDo) ReadDB() IDailyTrainCarriageDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyTrainCarriageDo) WriteDB() IDailyTrainCarriageDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyTrainCarriageDo) Session(config *gorm.Session) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyTrainCarriageDo) Clauses(conds ...clause.Expression) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyTrainCarriageDo) Returning(value interface{}, columns ...string) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyTrainCarriageDo) Not(conds ...gen.Condition) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyTrainCarriageDo) Or(conds ...gen.Condition) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyTrainCarriageDo) Select(conds ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyTrainCarriageDo) Where(conds ...gen.Condition) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyTrainCarriageDo) Order(conds ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyTrainCarriageDo) Distinct(cols ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyTrainCarriageDo) Omit(cols ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyTrainCarriageDo) Join(table schema.Tabler, on ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyTrainCarriageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyTrainCarriageDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyTrainCarriageDo) Group(cols ...field.Expr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyTrainCarriageDo) Having(conds ...gen.Condition) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyTrainCarriageDo) Limit(limit int) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyTrainCarriageDo) Offset(offset int) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyTrainCarriageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyTrainCarriageDo) Unscoped() IDailyTrainCarriageDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyTrainCarriageDo) Create(values ...*model.DailyTrainCarriage) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyTrainCarriageDo) CreateInBatches(values []*model.DailyTrainCarriage, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyTrainCarriageDo) Save(values ...*model.DailyTrainCarriage) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyTrainCarriageDo) First() (*model.DailyTrainCarriage, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainCarriage), nil
	}
}

func (d dailyTrainCarriageDo) Take() (*model.DailyTrainCarriage, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainCarriage), nil
	}
}

func (d dailyTrainCarriageDo) Last() (*model.DailyTrainCarriage, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainCarriage), nil
	}
}

func (d dailyTrainCarriageDo) Find() ([]*model.DailyTrainCarriage, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyTrainCarriage), err
}

func (d dailyTrainCarriageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainCarriage, err error) {
	buf := make([]*model.DailyTrainCarriage, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyTrainCarriageDo) FindInBatches(result *[]*model.DailyTrainCarriage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyTrainCarriageDo) Attrs(attrs ...field.AssignExpr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyTrainCarriageDo) Assign(attrs ...field.AssignExpr) IDailyTrainCarriageDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyTrainCarriageDo) Joins(fields ...field.RelationField) IDailyTrainCarriageDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyTrainCarriageDo) Preload(fields ...field.RelationField) IDailyTrainCarriageDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyTrainCarriageDo) FirstOrInit() (*model.DailyTrainCarriage, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainCarriage), nil
	}
}

func (d dailyTrainCarriageDo) FirstOrCreate() (*model.DailyTrainCarriage, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainCarriage), nil
	}
}

func (d dailyTrainCarriageDo) FindByPage(offset int, limit int) (result []*model.DailyTrainCarriage, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyTrainCarriageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyTrainCarriageDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyTrainCarriageDo) Delete(models ...*model.DailyTrainCarriage) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyTrainCarriageDo) withDO(do gen.Dao) *dailyTrainCarriageDo {
	d.DO = *do.(*gen.DO)
	return d
}
