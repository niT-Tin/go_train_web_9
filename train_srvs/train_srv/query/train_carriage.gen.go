// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newTrainCarriage(db *gorm.DB, opts ...gen.DOOption) trainCarriage {
	_trainCarriage := trainCarriage{}

	_trainCarriage.trainCarriageDo.UseDB(db, opts...)
	_trainCarriage.trainCarriageDo.UseModel(&model.TrainCarriage{})

	tableName := _trainCarriage.trainCarriageDo.TableName()
	_trainCarriage.ALL = field.NewAsterisk(tableName)
	_trainCarriage.ID = field.NewInt64(tableName, "id")
	_trainCarriage.TrainCode = field.NewString(tableName, "train_code")
	_trainCarriage.Index = field.NewInt32(tableName, "index")
	_trainCarriage.SeatType = field.NewString(tableName, "seat_type")
	_trainCarriage.SeatCount = field.NewInt32(tableName, "seat_count")
	_trainCarriage.RowCount = field.NewInt32(tableName, "row_count")
	_trainCarriage.ColCount = field.NewInt32(tableName, "col_count")
	_trainCarriage.CreateTime = field.NewTime(tableName, "create_time")
	_trainCarriage.UpdateTime = field.NewTime(tableName, "update_time")

	_trainCarriage.fillFieldMap()

	return _trainCarriage
}

type trainCarriage struct {
	trainCarriageDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	TrainCode  field.String // 车次编号
	Index      field.Int32  // 厢号
	SeatType   field.String // 座位类型|枚举[SeatTypeEnum]
	SeatCount  field.Int32  // 座位数
	RowCount   field.Int32  // 排数
	ColCount   field.Int32  // 列数
	CreateTime field.Time   // 新增时间
	UpdateTime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (t trainCarriage) Table(newTableName string) *trainCarriage {
	t.trainCarriageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trainCarriage) As(alias string) *trainCarriage {
	t.trainCarriageDo.DO = *(t.trainCarriageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trainCarriage) updateTableName(table string) *trainCarriage {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TrainCode = field.NewString(table, "train_code")
	t.Index = field.NewInt32(table, "index")
	t.SeatType = field.NewString(table, "seat_type")
	t.SeatCount = field.NewInt32(table, "seat_count")
	t.RowCount = field.NewInt32(table, "row_count")
	t.ColCount = field.NewInt32(table, "col_count")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *trainCarriage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trainCarriage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["train_code"] = t.TrainCode
	t.fieldMap["index"] = t.Index
	t.fieldMap["seat_type"] = t.SeatType
	t.fieldMap["seat_count"] = t.SeatCount
	t.fieldMap["row_count"] = t.RowCount
	t.fieldMap["col_count"] = t.ColCount
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t trainCarriage) clone(db *gorm.DB) trainCarriage {
	t.trainCarriageDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trainCarriage) replaceDB(db *gorm.DB) trainCarriage {
	t.trainCarriageDo.ReplaceDB(db)
	return t
}

type trainCarriageDo struct{ gen.DO }

type ITrainCarriageDo interface {
	gen.SubQuery
	Debug() ITrainCarriageDo
	WithContext(ctx context.Context) ITrainCarriageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrainCarriageDo
	WriteDB() ITrainCarriageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrainCarriageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrainCarriageDo
	Not(conds ...gen.Condition) ITrainCarriageDo
	Or(conds ...gen.Condition) ITrainCarriageDo
	Select(conds ...field.Expr) ITrainCarriageDo
	Where(conds ...gen.Condition) ITrainCarriageDo
	Order(conds ...field.Expr) ITrainCarriageDo
	Distinct(cols ...field.Expr) ITrainCarriageDo
	Omit(cols ...field.Expr) ITrainCarriageDo
	Join(table schema.Tabler, on ...field.Expr) ITrainCarriageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrainCarriageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrainCarriageDo
	Group(cols ...field.Expr) ITrainCarriageDo
	Having(conds ...gen.Condition) ITrainCarriageDo
	Limit(limit int) ITrainCarriageDo
	Offset(offset int) ITrainCarriageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainCarriageDo
	Unscoped() ITrainCarriageDo
	Create(values ...*model.TrainCarriage) error
	CreateInBatches(values []*model.TrainCarriage, batchSize int) error
	Save(values ...*model.TrainCarriage) error
	First() (*model.TrainCarriage, error)
	Take() (*model.TrainCarriage, error)
	Last() (*model.TrainCarriage, error)
	Find() ([]*model.TrainCarriage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainCarriage, err error)
	FindInBatches(result *[]*model.TrainCarriage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TrainCarriage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrainCarriageDo
	Assign(attrs ...field.AssignExpr) ITrainCarriageDo
	Joins(fields ...field.RelationField) ITrainCarriageDo
	Preload(fields ...field.RelationField) ITrainCarriageDo
	FirstOrInit() (*model.TrainCarriage, error)
	FirstOrCreate() (*model.TrainCarriage, error)
	FindByPage(offset int, limit int) (result []*model.TrainCarriage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrainCarriageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trainCarriageDo) Debug() ITrainCarriageDo {
	return t.withDO(t.DO.Debug())
}

func (t trainCarriageDo) WithContext(ctx context.Context) ITrainCarriageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainCarriageDo) ReadDB() ITrainCarriageDo {
	return t.Clauses(dbresolver.Read)
}

func (t trainCarriageDo) WriteDB() ITrainCarriageDo {
	return t.Clauses(dbresolver.Write)
}

func (t trainCarriageDo) Session(config *gorm.Session) ITrainCarriageDo {
	return t.withDO(t.DO.Session(config))
}

func (t trainCarriageDo) Clauses(conds ...clause.Expression) ITrainCarriageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainCarriageDo) Returning(value interface{}, columns ...string) ITrainCarriageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainCarriageDo) Not(conds ...gen.Condition) ITrainCarriageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainCarriageDo) Or(conds ...gen.Condition) ITrainCarriageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainCarriageDo) Select(conds ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainCarriageDo) Where(conds ...gen.Condition) ITrainCarriageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainCarriageDo) Order(conds ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainCarriageDo) Distinct(cols ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainCarriageDo) Omit(cols ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainCarriageDo) Join(table schema.Tabler, on ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainCarriageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainCarriageDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainCarriageDo) Group(cols ...field.Expr) ITrainCarriageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainCarriageDo) Having(conds ...gen.Condition) ITrainCarriageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainCarriageDo) Limit(limit int) ITrainCarriageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainCarriageDo) Offset(offset int) ITrainCarriageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainCarriageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainCarriageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainCarriageDo) Unscoped() ITrainCarriageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainCarriageDo) Create(values ...*model.TrainCarriage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainCarriageDo) CreateInBatches(values []*model.TrainCarriage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainCarriageDo) Save(values ...*model.TrainCarriage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainCarriageDo) First() (*model.TrainCarriage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainCarriage), nil
	}
}

func (t trainCarriageDo) Take() (*model.TrainCarriage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainCarriage), nil
	}
}

func (t trainCarriageDo) Last() (*model.TrainCarriage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainCarriage), nil
	}
}

func (t trainCarriageDo) Find() ([]*model.TrainCarriage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TrainCarriage), err
}

func (t trainCarriageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainCarriage, err error) {
	buf := make([]*model.TrainCarriage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainCarriageDo) FindInBatches(result *[]*model.TrainCarriage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainCarriageDo) Attrs(attrs ...field.AssignExpr) ITrainCarriageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainCarriageDo) Assign(attrs ...field.AssignExpr) ITrainCarriageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainCarriageDo) Joins(fields ...field.RelationField) ITrainCarriageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainCarriageDo) Preload(fields ...field.RelationField) ITrainCarriageDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainCarriageDo) FirstOrInit() (*model.TrainCarriage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainCarriage), nil
	}
}

func (t trainCarriageDo) FirstOrCreate() (*model.TrainCarriage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainCarriage), nil
	}
}

func (t trainCarriageDo) FindByPage(offset int, limit int) (result []*model.TrainCarriage, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainCarriageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainCarriageDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainCarriageDo) Delete(models ...*model.TrainCarriage) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainCarriageDo) withDO(do gen.Dao) *trainCarriageDo {
	t.DO = *do.(*gen.DO)
	return t
}
