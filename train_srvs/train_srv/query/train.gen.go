// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newTrain(db *gorm.DB, opts ...gen.DOOption) train {
	_train := train{}

	_train.trainDo.UseDB(db, opts...)
	_train.trainDo.UseModel(&model.Train{})

	tableName := _train.trainDo.TableName()
	_train.ALL = field.NewAsterisk(tableName)
	_train.ID = field.NewInt64(tableName, "id")
	_train.Code = field.NewString(tableName, "code")
	_train.Type = field.NewString(tableName, "type")
	_train.Start = field.NewString(tableName, "start")
	_train.StartPinyin = field.NewString(tableName, "start_pinyin")
	_train.StartTime = field.NewTime(tableName, "start_time")
	_train.End = field.NewString(tableName, "end")
	_train.EndPinyin = field.NewString(tableName, "end_pinyin")
	_train.EndTime = field.NewTime(tableName, "end_time")
	_train.CreateTime = field.NewTime(tableName, "create_time")
	_train.UpdateTime = field.NewTime(tableName, "update_time")

	_train.fillFieldMap()

	return _train
}

type train struct {
	trainDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	Code        field.String // 车次编号
	Type        field.String // 车次类型|枚举[TrainTypeEnum]
	Start       field.String // 始发站
	StartPinyin field.String // 始发站拼音
	StartTime   field.Time   // 出发时间
	End         field.String // 终点站
	EndPinyin   field.String // 终点站拼音
	EndTime     field.Time   // 到站时间
	CreateTime  field.Time   // 新增时间
	UpdateTime  field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (t train) Table(newTableName string) *train {
	t.trainDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t train) As(alias string) *train {
	t.trainDo.DO = *(t.trainDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *train) updateTableName(table string) *train {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Code = field.NewString(table, "code")
	t.Type = field.NewString(table, "type")
	t.Start = field.NewString(table, "start")
	t.StartPinyin = field.NewString(table, "start_pinyin")
	t.StartTime = field.NewTime(table, "start_time")
	t.End = field.NewString(table, "end")
	t.EndPinyin = field.NewString(table, "end_pinyin")
	t.EndTime = field.NewTime(table, "end_time")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *train) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *train) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["code"] = t.Code
	t.fieldMap["type"] = t.Type
	t.fieldMap["start"] = t.Start
	t.fieldMap["start_pinyin"] = t.StartPinyin
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["end"] = t.End
	t.fieldMap["end_pinyin"] = t.EndPinyin
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t train) clone(db *gorm.DB) train {
	t.trainDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t train) replaceDB(db *gorm.DB) train {
	t.trainDo.ReplaceDB(db)
	return t
}

type trainDo struct{ gen.DO }

type ITrainDo interface {
	gen.SubQuery
	Debug() ITrainDo
	WithContext(ctx context.Context) ITrainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrainDo
	WriteDB() ITrainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrainDo
	Not(conds ...gen.Condition) ITrainDo
	Or(conds ...gen.Condition) ITrainDo
	Select(conds ...field.Expr) ITrainDo
	Where(conds ...gen.Condition) ITrainDo
	Order(conds ...field.Expr) ITrainDo
	Distinct(cols ...field.Expr) ITrainDo
	Omit(cols ...field.Expr) ITrainDo
	Join(table schema.Tabler, on ...field.Expr) ITrainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrainDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrainDo
	Group(cols ...field.Expr) ITrainDo
	Having(conds ...gen.Condition) ITrainDo
	Limit(limit int) ITrainDo
	Offset(offset int) ITrainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainDo
	Unscoped() ITrainDo
	Create(values ...*model.Train) error
	CreateInBatches(values []*model.Train, batchSize int) error
	Save(values ...*model.Train) error
	First() (*model.Train, error)
	Take() (*model.Train, error)
	Last() (*model.Train, error)
	Find() ([]*model.Train, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Train, err error)
	FindInBatches(result *[]*model.Train, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Train) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrainDo
	Assign(attrs ...field.AssignExpr) ITrainDo
	Joins(fields ...field.RelationField) ITrainDo
	Preload(fields ...field.RelationField) ITrainDo
	FirstOrInit() (*model.Train, error)
	FirstOrCreate() (*model.Train, error)
	FindByPage(offset int, limit int) (result []*model.Train, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trainDo) Debug() ITrainDo {
	return t.withDO(t.DO.Debug())
}

func (t trainDo) WithContext(ctx context.Context) ITrainDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainDo) ReadDB() ITrainDo {
	return t.Clauses(dbresolver.Read)
}

func (t trainDo) WriteDB() ITrainDo {
	return t.Clauses(dbresolver.Write)
}

func (t trainDo) Session(config *gorm.Session) ITrainDo {
	return t.withDO(t.DO.Session(config))
}

func (t trainDo) Clauses(conds ...clause.Expression) ITrainDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainDo) Returning(value interface{}, columns ...string) ITrainDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainDo) Not(conds ...gen.Condition) ITrainDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainDo) Or(conds ...gen.Condition) ITrainDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainDo) Select(conds ...field.Expr) ITrainDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainDo) Where(conds ...gen.Condition) ITrainDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainDo) Order(conds ...field.Expr) ITrainDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainDo) Distinct(cols ...field.Expr) ITrainDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainDo) Omit(cols ...field.Expr) ITrainDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainDo) Join(table schema.Tabler, on ...field.Expr) ITrainDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrainDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrainDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainDo) Group(cols ...field.Expr) ITrainDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainDo) Having(conds ...gen.Condition) ITrainDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainDo) Limit(limit int) ITrainDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainDo) Offset(offset int) ITrainDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainDo) Unscoped() ITrainDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainDo) Create(values ...*model.Train) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainDo) CreateInBatches(values []*model.Train, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainDo) Save(values ...*model.Train) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainDo) First() (*model.Train, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Train), nil
	}
}

func (t trainDo) Take() (*model.Train, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Train), nil
	}
}

func (t trainDo) Last() (*model.Train, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Train), nil
	}
}

func (t trainDo) Find() ([]*model.Train, error) {
	result, err := t.DO.Find()
	return result.([]*model.Train), err
}

func (t trainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Train, err error) {
	buf := make([]*model.Train, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainDo) FindInBatches(result *[]*model.Train, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainDo) Attrs(attrs ...field.AssignExpr) ITrainDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainDo) Assign(attrs ...field.AssignExpr) ITrainDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainDo) Joins(fields ...field.RelationField) ITrainDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainDo) Preload(fields ...field.RelationField) ITrainDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainDo) FirstOrInit() (*model.Train, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Train), nil
	}
}

func (t trainDo) FirstOrCreate() (*model.Train, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Train), nil
	}
}

func (t trainDo) FindByPage(offset int, limit int) (result []*model.Train, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainDo) Delete(models ...*model.Train) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainDo) withDO(do gen.Dao) *trainDo {
	t.DO = *do.(*gen.DO)
	return t
}
