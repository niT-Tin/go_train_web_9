// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newStation(db *gorm.DB, opts ...gen.DOOption) station {
	_station := station{}

	_station.stationDo.UseDB(db, opts...)
	_station.stationDo.UseModel(&model.Station{})

	tableName := _station.stationDo.TableName()
	_station.ALL = field.NewAsterisk(tableName)
	_station.ID = field.NewInt64(tableName, "id")
	_station.Name = field.NewString(tableName, "name")
	_station.NamePinyin = field.NewString(tableName, "name_pinyin")
	_station.NamePy = field.NewString(tableName, "name_py")
	_station.CreateTime = field.NewTime(tableName, "create_time")
	_station.UpdateTime = field.NewTime(tableName, "update_time")

	_station.fillFieldMap()

	return _station
}

type station struct {
	stationDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	Name       field.String // 站名
	NamePinyin field.String // 站名拼音
	NamePy     field.String // 站名拼音首字母
	CreateTime field.Time   // 新增时间
	UpdateTime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (s station) Table(newTableName string) *station {
	s.stationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s station) As(alias string) *station {
	s.stationDo.DO = *(s.stationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *station) updateTableName(table string) *station {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.NamePinyin = field.NewString(table, "name_pinyin")
	s.NamePy = field.NewString(table, "name_py")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *station) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *station) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["name_pinyin"] = s.NamePinyin
	s.fieldMap["name_py"] = s.NamePy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s station) clone(db *gorm.DB) station {
	s.stationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s station) replaceDB(db *gorm.DB) station {
	s.stationDo.ReplaceDB(db)
	return s
}

type stationDo struct{ gen.DO }

type IStationDo interface {
	gen.SubQuery
	Debug() IStationDo
	WithContext(ctx context.Context) IStationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStationDo
	WriteDB() IStationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStationDo
	Not(conds ...gen.Condition) IStationDo
	Or(conds ...gen.Condition) IStationDo
	Select(conds ...field.Expr) IStationDo
	Where(conds ...gen.Condition) IStationDo
	Order(conds ...field.Expr) IStationDo
	Distinct(cols ...field.Expr) IStationDo
	Omit(cols ...field.Expr) IStationDo
	Join(table schema.Tabler, on ...field.Expr) IStationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStationDo
	Group(cols ...field.Expr) IStationDo
	Having(conds ...gen.Condition) IStationDo
	Limit(limit int) IStationDo
	Offset(offset int) IStationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStationDo
	Unscoped() IStationDo
	Create(values ...*model.Station) error
	CreateInBatches(values []*model.Station, batchSize int) error
	Save(values ...*model.Station) error
	First() (*model.Station, error)
	Take() (*model.Station, error)
	Last() (*model.Station, error)
	Find() ([]*model.Station, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Station, err error)
	FindInBatches(result *[]*model.Station, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Station) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStationDo
	Assign(attrs ...field.AssignExpr) IStationDo
	Joins(fields ...field.RelationField) IStationDo
	Preload(fields ...field.RelationField) IStationDo
	FirstOrInit() (*model.Station, error)
	FirstOrCreate() (*model.Station, error)
	FindByPage(offset int, limit int) (result []*model.Station, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stationDo) Debug() IStationDo {
	return s.withDO(s.DO.Debug())
}

func (s stationDo) WithContext(ctx context.Context) IStationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stationDo) ReadDB() IStationDo {
	return s.Clauses(dbresolver.Read)
}

func (s stationDo) WriteDB() IStationDo {
	return s.Clauses(dbresolver.Write)
}

func (s stationDo) Session(config *gorm.Session) IStationDo {
	return s.withDO(s.DO.Session(config))
}

func (s stationDo) Clauses(conds ...clause.Expression) IStationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stationDo) Returning(value interface{}, columns ...string) IStationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stationDo) Not(conds ...gen.Condition) IStationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stationDo) Or(conds ...gen.Condition) IStationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stationDo) Select(conds ...field.Expr) IStationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stationDo) Where(conds ...gen.Condition) IStationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stationDo) Order(conds ...field.Expr) IStationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stationDo) Distinct(cols ...field.Expr) IStationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stationDo) Omit(cols ...field.Expr) IStationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stationDo) Join(table schema.Tabler, on ...field.Expr) IStationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stationDo) RightJoin(table schema.Tabler, on ...field.Expr) IStationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stationDo) Group(cols ...field.Expr) IStationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stationDo) Having(conds ...gen.Condition) IStationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stationDo) Limit(limit int) IStationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stationDo) Offset(offset int) IStationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stationDo) Unscoped() IStationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stationDo) Create(values ...*model.Station) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stationDo) CreateInBatches(values []*model.Station, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stationDo) Save(values ...*model.Station) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stationDo) First() (*model.Station, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Station), nil
	}
}

func (s stationDo) Take() (*model.Station, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Station), nil
	}
}

func (s stationDo) Last() (*model.Station, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Station), nil
	}
}

func (s stationDo) Find() ([]*model.Station, error) {
	result, err := s.DO.Find()
	return result.([]*model.Station), err
}

func (s stationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Station, err error) {
	buf := make([]*model.Station, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stationDo) FindInBatches(result *[]*model.Station, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stationDo) Attrs(attrs ...field.AssignExpr) IStationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stationDo) Assign(attrs ...field.AssignExpr) IStationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stationDo) Joins(fields ...field.RelationField) IStationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stationDo) Preload(fields ...field.RelationField) IStationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stationDo) FirstOrInit() (*model.Station, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Station), nil
	}
}

func (s stationDo) FirstOrCreate() (*model.Station, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Station), nil
	}
}

func (s stationDo) FindByPage(offset int, limit int) (result []*model.Station, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stationDo) Delete(models ...*model.Station) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stationDo) withDO(do gen.Dao) *stationDo {
	s.DO = *do.(*gen.DO)
	return s
}
