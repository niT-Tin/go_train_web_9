// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newDailyTrain(db *gorm.DB, opts ...gen.DOOption) dailyTrain {
	_dailyTrain := dailyTrain{}

	_dailyTrain.dailyTrainDo.UseDB(db, opts...)
	_dailyTrain.dailyTrainDo.UseModel(&model.DailyTrain{})

	tableName := _dailyTrain.dailyTrainDo.TableName()
	_dailyTrain.ALL = field.NewAsterisk(tableName)
	_dailyTrain.ID = field.NewInt64(tableName, "id")
	_dailyTrain.Date = field.NewTime(tableName, "date")
	_dailyTrain.Code = field.NewString(tableName, "code")
	_dailyTrain.Type = field.NewString(tableName, "type")
	_dailyTrain.Start = field.NewString(tableName, "start")
	_dailyTrain.StartPinyin = field.NewString(tableName, "start_pinyin")
	_dailyTrain.StartTime = field.NewTime(tableName, "start_time")
	_dailyTrain.End = field.NewString(tableName, "end")
	_dailyTrain.EndPinyin = field.NewString(tableName, "end_pinyin")
	_dailyTrain.EndTime = field.NewTime(tableName, "end_time")
	_dailyTrain.CreateTime = field.NewTime(tableName, "create_time")
	_dailyTrain.UpdateTime = field.NewTime(tableName, "update_time")

	_dailyTrain.fillFieldMap()

	return _dailyTrain
}

type dailyTrain struct {
	dailyTrainDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	Date        field.Time   // 日期
	Code        field.String // 车次编号
	Type        field.String // 车次类型|枚举[TrainTypeEnum]
	Start       field.String // 始发站
	StartPinyin field.String // 始发站拼音
	StartTime   field.Time   // 出发时间
	End         field.String // 终点站
	EndPinyin   field.String // 终点站拼音
	EndTime     field.Time   // 到站时间
	CreateTime  field.Time   // 新增时间
	UpdateTime  field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (d dailyTrain) Table(newTableName string) *dailyTrain {
	d.dailyTrainDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyTrain) As(alias string) *dailyTrain {
	d.dailyTrainDo.DO = *(d.dailyTrainDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyTrain) updateTableName(table string) *dailyTrain {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Date = field.NewTime(table, "date")
	d.Code = field.NewString(table, "code")
	d.Type = field.NewString(table, "type")
	d.Start = field.NewString(table, "start")
	d.StartPinyin = field.NewString(table, "start_pinyin")
	d.StartTime = field.NewTime(table, "start_time")
	d.End = field.NewString(table, "end")
	d.EndPinyin = field.NewString(table, "end_pinyin")
	d.EndTime = field.NewTime(table, "end_time")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")

	d.fillFieldMap()

	return d
}

func (d *dailyTrain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyTrain) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["date"] = d.Date
	d.fieldMap["code"] = d.Code
	d.fieldMap["type"] = d.Type
	d.fieldMap["start"] = d.Start
	d.fieldMap["start_pinyin"] = d.StartPinyin
	d.fieldMap["start_time"] = d.StartTime
	d.fieldMap["end"] = d.End
	d.fieldMap["end_pinyin"] = d.EndPinyin
	d.fieldMap["end_time"] = d.EndTime
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
}

func (d dailyTrain) clone(db *gorm.DB) dailyTrain {
	d.dailyTrainDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyTrain) replaceDB(db *gorm.DB) dailyTrain {
	d.dailyTrainDo.ReplaceDB(db)
	return d
}

type dailyTrainDo struct{ gen.DO }

type IDailyTrainDo interface {
	gen.SubQuery
	Debug() IDailyTrainDo
	WithContext(ctx context.Context) IDailyTrainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyTrainDo
	WriteDB() IDailyTrainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyTrainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyTrainDo
	Not(conds ...gen.Condition) IDailyTrainDo
	Or(conds ...gen.Condition) IDailyTrainDo
	Select(conds ...field.Expr) IDailyTrainDo
	Where(conds ...gen.Condition) IDailyTrainDo
	Order(conds ...field.Expr) IDailyTrainDo
	Distinct(cols ...field.Expr) IDailyTrainDo
	Omit(cols ...field.Expr) IDailyTrainDo
	Join(table schema.Tabler, on ...field.Expr) IDailyTrainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainDo
	Group(cols ...field.Expr) IDailyTrainDo
	Having(conds ...gen.Condition) IDailyTrainDo
	Limit(limit int) IDailyTrainDo
	Offset(offset int) IDailyTrainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainDo
	Unscoped() IDailyTrainDo
	Create(values ...*model.DailyTrain) error
	CreateInBatches(values []*model.DailyTrain, batchSize int) error
	Save(values ...*model.DailyTrain) error
	First() (*model.DailyTrain, error)
	Take() (*model.DailyTrain, error)
	Last() (*model.DailyTrain, error)
	Find() ([]*model.DailyTrain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrain, err error)
	FindInBatches(result *[]*model.DailyTrain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyTrain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyTrainDo
	Assign(attrs ...field.AssignExpr) IDailyTrainDo
	Joins(fields ...field.RelationField) IDailyTrainDo
	Preload(fields ...field.RelationField) IDailyTrainDo
	FirstOrInit() (*model.DailyTrain, error)
	FirstOrCreate() (*model.DailyTrain, error)
	FindByPage(offset int, limit int) (result []*model.DailyTrain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyTrainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyTrainDo) Debug() IDailyTrainDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyTrainDo) WithContext(ctx context.Context) IDailyTrainDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyTrainDo) ReadDB() IDailyTrainDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyTrainDo) WriteDB() IDailyTrainDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyTrainDo) Session(config *gorm.Session) IDailyTrainDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyTrainDo) Clauses(conds ...clause.Expression) IDailyTrainDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyTrainDo) Returning(value interface{}, columns ...string) IDailyTrainDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyTrainDo) Not(conds ...gen.Condition) IDailyTrainDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyTrainDo) Or(conds ...gen.Condition) IDailyTrainDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyTrainDo) Select(conds ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyTrainDo) Where(conds ...gen.Condition) IDailyTrainDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyTrainDo) Order(conds ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyTrainDo) Distinct(cols ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyTrainDo) Omit(cols ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyTrainDo) Join(table schema.Tabler, on ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyTrainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyTrainDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyTrainDo) Group(cols ...field.Expr) IDailyTrainDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyTrainDo) Having(conds ...gen.Condition) IDailyTrainDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyTrainDo) Limit(limit int) IDailyTrainDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyTrainDo) Offset(offset int) IDailyTrainDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyTrainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyTrainDo) Unscoped() IDailyTrainDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyTrainDo) Create(values ...*model.DailyTrain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyTrainDo) CreateInBatches(values []*model.DailyTrain, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyTrainDo) Save(values ...*model.DailyTrain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyTrainDo) First() (*model.DailyTrain, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrain), nil
	}
}

func (d dailyTrainDo) Take() (*model.DailyTrain, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrain), nil
	}
}

func (d dailyTrainDo) Last() (*model.DailyTrain, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrain), nil
	}
}

func (d dailyTrainDo) Find() ([]*model.DailyTrain, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyTrain), err
}

func (d dailyTrainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrain, err error) {
	buf := make([]*model.DailyTrain, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyTrainDo) FindInBatches(result *[]*model.DailyTrain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyTrainDo) Attrs(attrs ...field.AssignExpr) IDailyTrainDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyTrainDo) Assign(attrs ...field.AssignExpr) IDailyTrainDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyTrainDo) Joins(fields ...field.RelationField) IDailyTrainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyTrainDo) Preload(fields ...field.RelationField) IDailyTrainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyTrainDo) FirstOrInit() (*model.DailyTrain, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrain), nil
	}
}

func (d dailyTrainDo) FirstOrCreate() (*model.DailyTrain, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrain), nil
	}
}

func (d dailyTrainDo) FindByPage(offset int, limit int) (result []*model.DailyTrain, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyTrainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyTrainDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyTrainDo) Delete(models ...*model.DailyTrain) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyTrainDo) withDO(do gen.Dao) *dailyTrainDo {
	d.DO = *do.(*gen.DO)
	return d
}
