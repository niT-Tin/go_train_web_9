// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newDailyTrainSeat(db *gorm.DB, opts ...gen.DOOption) dailyTrainSeat {
	_dailyTrainSeat := dailyTrainSeat{}

	_dailyTrainSeat.dailyTrainSeatDo.UseDB(db, opts...)
	_dailyTrainSeat.dailyTrainSeatDo.UseModel(&model.DailyTrainSeat{})

	tableName := _dailyTrainSeat.dailyTrainSeatDo.TableName()
	_dailyTrainSeat.ALL = field.NewAsterisk(tableName)
	_dailyTrainSeat.ID = field.NewInt64(tableName, "id")
	_dailyTrainSeat.Date = field.NewTime(tableName, "date")
	_dailyTrainSeat.TrainCode = field.NewString(tableName, "train_code")
	_dailyTrainSeat.CarriageIndex = field.NewInt32(tableName, "carriage_index")
	_dailyTrainSeat.Row_ = field.NewString(tableName, "row")
	_dailyTrainSeat.Col = field.NewString(tableName, "col")
	_dailyTrainSeat.SeatType = field.NewString(tableName, "seat_type")
	_dailyTrainSeat.CarriageSeatIndex = field.NewInt32(tableName, "carriage_seat_index")
	_dailyTrainSeat.Sell = field.NewInt64(tableName, "sell")
	_dailyTrainSeat.CreateTime = field.NewTime(tableName, "create_time")
	_dailyTrainSeat.UpdateTime = field.NewTime(tableName, "update_time")

	_dailyTrainSeat.fillFieldMap()

	return _dailyTrainSeat
}

type dailyTrainSeat struct {
	dailyTrainSeatDo

	ALL               field.Asterisk
	ID                field.Int64  // id
	Date              field.Time   // 日期
	TrainCode         field.String // 车次编号
	CarriageIndex     field.Int32  // 箱序
	Row_              field.String // 排号|01, 02
	Col               field.String // 列号|枚举[SeatColEnum]
	SeatType          field.String // 座位类型|枚举[SeatTypeEnum]
	CarriageSeatIndex field.Int32  // 同车箱座序
	Sell              field.Int64  // 售卖情况|0表示可卖，1表示已卖
	CreateTime        field.Time   // 新增时间
	UpdateTime        field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (d dailyTrainSeat) Table(newTableName string) *dailyTrainSeat {
	d.dailyTrainSeatDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyTrainSeat) As(alias string) *dailyTrainSeat {
	d.dailyTrainSeatDo.DO = *(d.dailyTrainSeatDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyTrainSeat) updateTableName(table string) *dailyTrainSeat {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Date = field.NewTime(table, "date")
	d.TrainCode = field.NewString(table, "train_code")
	d.CarriageIndex = field.NewInt32(table, "carriage_index")
	d.Row_ = field.NewString(table, "row")
	d.Col = field.NewString(table, "col")
	d.SeatType = field.NewString(table, "seat_type")
	d.CarriageSeatIndex = field.NewInt32(table, "carriage_seat_index")
	d.Sell = field.NewInt64(table, "sell")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")

	d.fillFieldMap()

	return d
}

func (d *dailyTrainSeat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyTrainSeat) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["date"] = d.Date
	d.fieldMap["train_code"] = d.TrainCode
	d.fieldMap["carriage_index"] = d.CarriageIndex
	d.fieldMap["row"] = d.Row_
	d.fieldMap["col"] = d.Col
	d.fieldMap["seat_type"] = d.SeatType
	d.fieldMap["carriage_seat_index"] = d.CarriageSeatIndex
	d.fieldMap["sell"] = d.Sell
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
}

func (d dailyTrainSeat) clone(db *gorm.DB) dailyTrainSeat {
	d.dailyTrainSeatDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyTrainSeat) replaceDB(db *gorm.DB) dailyTrainSeat {
	d.dailyTrainSeatDo.ReplaceDB(db)
	return d
}

type dailyTrainSeatDo struct{ gen.DO }

type IDailyTrainSeatDo interface {
	gen.SubQuery
	Debug() IDailyTrainSeatDo
	WithContext(ctx context.Context) IDailyTrainSeatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyTrainSeatDo
	WriteDB() IDailyTrainSeatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyTrainSeatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyTrainSeatDo
	Not(conds ...gen.Condition) IDailyTrainSeatDo
	Or(conds ...gen.Condition) IDailyTrainSeatDo
	Select(conds ...field.Expr) IDailyTrainSeatDo
	Where(conds ...gen.Condition) IDailyTrainSeatDo
	Order(conds ...field.Expr) IDailyTrainSeatDo
	Distinct(cols ...field.Expr) IDailyTrainSeatDo
	Omit(cols ...field.Expr) IDailyTrainSeatDo
	Join(table schema.Tabler, on ...field.Expr) IDailyTrainSeatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainSeatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainSeatDo
	Group(cols ...field.Expr) IDailyTrainSeatDo
	Having(conds ...gen.Condition) IDailyTrainSeatDo
	Limit(limit int) IDailyTrainSeatDo
	Offset(offset int) IDailyTrainSeatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainSeatDo
	Unscoped() IDailyTrainSeatDo
	Create(values ...*model.DailyTrainSeat) error
	CreateInBatches(values []*model.DailyTrainSeat, batchSize int) error
	Save(values ...*model.DailyTrainSeat) error
	First() (*model.DailyTrainSeat, error)
	Take() (*model.DailyTrainSeat, error)
	Last() (*model.DailyTrainSeat, error)
	Find() ([]*model.DailyTrainSeat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainSeat, err error)
	FindInBatches(result *[]*model.DailyTrainSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyTrainSeat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyTrainSeatDo
	Assign(attrs ...field.AssignExpr) IDailyTrainSeatDo
	Joins(fields ...field.RelationField) IDailyTrainSeatDo
	Preload(fields ...field.RelationField) IDailyTrainSeatDo
	FirstOrInit() (*model.DailyTrainSeat, error)
	FirstOrCreate() (*model.DailyTrainSeat, error)
	FindByPage(offset int, limit int) (result []*model.DailyTrainSeat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyTrainSeatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyTrainSeatDo) Debug() IDailyTrainSeatDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyTrainSeatDo) WithContext(ctx context.Context) IDailyTrainSeatDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyTrainSeatDo) ReadDB() IDailyTrainSeatDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyTrainSeatDo) WriteDB() IDailyTrainSeatDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyTrainSeatDo) Session(config *gorm.Session) IDailyTrainSeatDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyTrainSeatDo) Clauses(conds ...clause.Expression) IDailyTrainSeatDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyTrainSeatDo) Returning(value interface{}, columns ...string) IDailyTrainSeatDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyTrainSeatDo) Not(conds ...gen.Condition) IDailyTrainSeatDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyTrainSeatDo) Or(conds ...gen.Condition) IDailyTrainSeatDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyTrainSeatDo) Select(conds ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyTrainSeatDo) Where(conds ...gen.Condition) IDailyTrainSeatDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyTrainSeatDo) Order(conds ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyTrainSeatDo) Distinct(cols ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyTrainSeatDo) Omit(cols ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyTrainSeatDo) Join(table schema.Tabler, on ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyTrainSeatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyTrainSeatDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyTrainSeatDo) Group(cols ...field.Expr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyTrainSeatDo) Having(conds ...gen.Condition) IDailyTrainSeatDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyTrainSeatDo) Limit(limit int) IDailyTrainSeatDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyTrainSeatDo) Offset(offset int) IDailyTrainSeatDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyTrainSeatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainSeatDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyTrainSeatDo) Unscoped() IDailyTrainSeatDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyTrainSeatDo) Create(values ...*model.DailyTrainSeat) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyTrainSeatDo) CreateInBatches(values []*model.DailyTrainSeat, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyTrainSeatDo) Save(values ...*model.DailyTrainSeat) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyTrainSeatDo) First() (*model.DailyTrainSeat, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainSeat), nil
	}
}

func (d dailyTrainSeatDo) Take() (*model.DailyTrainSeat, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainSeat), nil
	}
}

func (d dailyTrainSeatDo) Last() (*model.DailyTrainSeat, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainSeat), nil
	}
}

func (d dailyTrainSeatDo) Find() ([]*model.DailyTrainSeat, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyTrainSeat), err
}

func (d dailyTrainSeatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainSeat, err error) {
	buf := make([]*model.DailyTrainSeat, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyTrainSeatDo) FindInBatches(result *[]*model.DailyTrainSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyTrainSeatDo) Attrs(attrs ...field.AssignExpr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyTrainSeatDo) Assign(attrs ...field.AssignExpr) IDailyTrainSeatDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyTrainSeatDo) Joins(fields ...field.RelationField) IDailyTrainSeatDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyTrainSeatDo) Preload(fields ...field.RelationField) IDailyTrainSeatDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyTrainSeatDo) FirstOrInit() (*model.DailyTrainSeat, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainSeat), nil
	}
}

func (d dailyTrainSeatDo) FirstOrCreate() (*model.DailyTrainSeat, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainSeat), nil
	}
}

func (d dailyTrainSeatDo) FindByPage(offset int, limit int) (result []*model.DailyTrainSeat, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyTrainSeatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyTrainSeatDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyTrainSeatDo) Delete(models ...*model.DailyTrainSeat) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyTrainSeatDo) withDO(do gen.Dao) *dailyTrainSeatDo {
	d.DO = *do.(*gen.DO)
	return d
}
