// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newTrainSeat(db *gorm.DB, opts ...gen.DOOption) trainSeat {
	_trainSeat := trainSeat{}

	_trainSeat.trainSeatDo.UseDB(db, opts...)
	_trainSeat.trainSeatDo.UseModel(&model.TrainSeat{})

	tableName := _trainSeat.trainSeatDo.TableName()
	_trainSeat.ALL = field.NewAsterisk(tableName)
	_trainSeat.ID = field.NewInt64(tableName, "id")
	_trainSeat.TrainCode = field.NewString(tableName, "train_code")
	_trainSeat.CarriageIndex = field.NewInt32(tableName, "carriage_index")
	_trainSeat.Row_ = field.NewString(tableName, "row")
	_trainSeat.Col = field.NewString(tableName, "col")
	_trainSeat.SeatType = field.NewString(tableName, "seat_type")
	_trainSeat.CarriageSeatIndex = field.NewInt32(tableName, "carriage_seat_index")
	_trainSeat.CreateTime = field.NewTime(tableName, "create_time")
	_trainSeat.UpdateTime = field.NewTime(tableName, "update_time")

	_trainSeat.fillFieldMap()

	return _trainSeat
}

type trainSeat struct {
	trainSeatDo

	ALL               field.Asterisk
	ID                field.Int64  // id
	TrainCode         field.String // 车次编号
	CarriageIndex     field.Int32  // 厢序
	Row_              field.String // 排号|01, 02
	Col               field.String // 列号|枚举[SeatColEnum]
	SeatType          field.String // 座位类型|枚举[SeatTypeEnum]
	CarriageSeatIndex field.Int32  // 同车厢座序
	CreateTime        field.Time   // 新增时间
	UpdateTime        field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (t trainSeat) Table(newTableName string) *trainSeat {
	t.trainSeatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trainSeat) As(alias string) *trainSeat {
	t.trainSeatDo.DO = *(t.trainSeatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trainSeat) updateTableName(table string) *trainSeat {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TrainCode = field.NewString(table, "train_code")
	t.CarriageIndex = field.NewInt32(table, "carriage_index")
	t.Row_ = field.NewString(table, "row")
	t.Col = field.NewString(table, "col")
	t.SeatType = field.NewString(table, "seat_type")
	t.CarriageSeatIndex = field.NewInt32(table, "carriage_seat_index")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *trainSeat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trainSeat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["train_code"] = t.TrainCode
	t.fieldMap["carriage_index"] = t.CarriageIndex
	t.fieldMap["row"] = t.Row_
	t.fieldMap["col"] = t.Col
	t.fieldMap["seat_type"] = t.SeatType
	t.fieldMap["carriage_seat_index"] = t.CarriageSeatIndex
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t trainSeat) clone(db *gorm.DB) trainSeat {
	t.trainSeatDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trainSeat) replaceDB(db *gorm.DB) trainSeat {
	t.trainSeatDo.ReplaceDB(db)
	return t
}

type trainSeatDo struct{ gen.DO }

type ITrainSeatDo interface {
	gen.SubQuery
	Debug() ITrainSeatDo
	WithContext(ctx context.Context) ITrainSeatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrainSeatDo
	WriteDB() ITrainSeatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrainSeatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrainSeatDo
	Not(conds ...gen.Condition) ITrainSeatDo
	Or(conds ...gen.Condition) ITrainSeatDo
	Select(conds ...field.Expr) ITrainSeatDo
	Where(conds ...gen.Condition) ITrainSeatDo
	Order(conds ...field.Expr) ITrainSeatDo
	Distinct(cols ...field.Expr) ITrainSeatDo
	Omit(cols ...field.Expr) ITrainSeatDo
	Join(table schema.Tabler, on ...field.Expr) ITrainSeatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrainSeatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrainSeatDo
	Group(cols ...field.Expr) ITrainSeatDo
	Having(conds ...gen.Condition) ITrainSeatDo
	Limit(limit int) ITrainSeatDo
	Offset(offset int) ITrainSeatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainSeatDo
	Unscoped() ITrainSeatDo
	Create(values ...*model.TrainSeat) error
	CreateInBatches(values []*model.TrainSeat, batchSize int) error
	Save(values ...*model.TrainSeat) error
	First() (*model.TrainSeat, error)
	Take() (*model.TrainSeat, error)
	Last() (*model.TrainSeat, error)
	Find() ([]*model.TrainSeat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainSeat, err error)
	FindInBatches(result *[]*model.TrainSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TrainSeat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrainSeatDo
	Assign(attrs ...field.AssignExpr) ITrainSeatDo
	Joins(fields ...field.RelationField) ITrainSeatDo
	Preload(fields ...field.RelationField) ITrainSeatDo
	FirstOrInit() (*model.TrainSeat, error)
	FirstOrCreate() (*model.TrainSeat, error)
	FindByPage(offset int, limit int) (result []*model.TrainSeat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrainSeatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trainSeatDo) Debug() ITrainSeatDo {
	return t.withDO(t.DO.Debug())
}

func (t trainSeatDo) WithContext(ctx context.Context) ITrainSeatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainSeatDo) ReadDB() ITrainSeatDo {
	return t.Clauses(dbresolver.Read)
}

func (t trainSeatDo) WriteDB() ITrainSeatDo {
	return t.Clauses(dbresolver.Write)
}

func (t trainSeatDo) Session(config *gorm.Session) ITrainSeatDo {
	return t.withDO(t.DO.Session(config))
}

func (t trainSeatDo) Clauses(conds ...clause.Expression) ITrainSeatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainSeatDo) Returning(value interface{}, columns ...string) ITrainSeatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainSeatDo) Not(conds ...gen.Condition) ITrainSeatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainSeatDo) Or(conds ...gen.Condition) ITrainSeatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainSeatDo) Select(conds ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainSeatDo) Where(conds ...gen.Condition) ITrainSeatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainSeatDo) Order(conds ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainSeatDo) Distinct(cols ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainSeatDo) Omit(cols ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainSeatDo) Join(table schema.Tabler, on ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainSeatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainSeatDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainSeatDo) Group(cols ...field.Expr) ITrainSeatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainSeatDo) Having(conds ...gen.Condition) ITrainSeatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainSeatDo) Limit(limit int) ITrainSeatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainSeatDo) Offset(offset int) ITrainSeatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainSeatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainSeatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainSeatDo) Unscoped() ITrainSeatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainSeatDo) Create(values ...*model.TrainSeat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainSeatDo) CreateInBatches(values []*model.TrainSeat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainSeatDo) Save(values ...*model.TrainSeat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainSeatDo) First() (*model.TrainSeat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainSeat), nil
	}
}

func (t trainSeatDo) Take() (*model.TrainSeat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainSeat), nil
	}
}

func (t trainSeatDo) Last() (*model.TrainSeat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainSeat), nil
	}
}

func (t trainSeatDo) Find() ([]*model.TrainSeat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TrainSeat), err
}

func (t trainSeatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainSeat, err error) {
	buf := make([]*model.TrainSeat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainSeatDo) FindInBatches(result *[]*model.TrainSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainSeatDo) Attrs(attrs ...field.AssignExpr) ITrainSeatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainSeatDo) Assign(attrs ...field.AssignExpr) ITrainSeatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainSeatDo) Joins(fields ...field.RelationField) ITrainSeatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainSeatDo) Preload(fields ...field.RelationField) ITrainSeatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainSeatDo) FirstOrInit() (*model.TrainSeat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainSeat), nil
	}
}

func (t trainSeatDo) FirstOrCreate() (*model.TrainSeat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainSeat), nil
	}
}

func (t trainSeatDo) FindByPage(offset int, limit int) (result []*model.TrainSeat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainSeatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainSeatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainSeatDo) Delete(models ...*model.TrainSeat) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainSeatDo) withDO(do gen.Dao) *trainSeatDo {
	t.DO = *do.(*gen.DO)
	return t
}
