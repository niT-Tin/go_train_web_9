// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newDailyTrainStation(db *gorm.DB, opts ...gen.DOOption) dailyTrainStation {
	_dailyTrainStation := dailyTrainStation{}

	_dailyTrainStation.dailyTrainStationDo.UseDB(db, opts...)
	_dailyTrainStation.dailyTrainStationDo.UseModel(&model.DailyTrainStation{})

	tableName := _dailyTrainStation.dailyTrainStationDo.TableName()
	_dailyTrainStation.ALL = field.NewAsterisk(tableName)
	_dailyTrainStation.ID = field.NewInt64(tableName, "id")
	_dailyTrainStation.Date = field.NewTime(tableName, "date")
	_dailyTrainStation.TrainCode = field.NewString(tableName, "train_code")
	_dailyTrainStation.Index = field.NewInt32(tableName, "index")
	_dailyTrainStation.Name = field.NewString(tableName, "name")
	_dailyTrainStation.NamePinyin = field.NewString(tableName, "name_pinyin")
	_dailyTrainStation.InTime = field.NewTime(tableName, "in_time")
	_dailyTrainStation.OutTime = field.NewTime(tableName, "out_time")
	_dailyTrainStation.StopTime = field.NewTime(tableName, "stop_time")
	_dailyTrainStation.Km = field.NewFloat64(tableName, "km")
	_dailyTrainStation.CreateTime = field.NewTime(tableName, "create_time")
	_dailyTrainStation.UpdateTime = field.NewTime(tableName, "update_time")

	_dailyTrainStation.fillFieldMap()

	return _dailyTrainStation
}

type dailyTrainStation struct {
	dailyTrainStationDo

	ALL        field.Asterisk
	ID         field.Int64   // id
	Date       field.Time    // 日期
	TrainCode  field.String  // 车次编号
	Index      field.Int32   // 站序
	Name       field.String  // 站名
	NamePinyin field.String  // 站名拼音
	InTime     field.Time    // 进站时间
	OutTime    field.Time    // 出站时间
	StopTime   field.Time    // 停站时长
	Km         field.Float64 // 里程（公里）|从上一站到本站的距离
	CreateTime field.Time    // 新增时间
	UpdateTime field.Time    // 修改时间

	fieldMap map[string]field.Expr
}

func (d dailyTrainStation) Table(newTableName string) *dailyTrainStation {
	d.dailyTrainStationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyTrainStation) As(alias string) *dailyTrainStation {
	d.dailyTrainStationDo.DO = *(d.dailyTrainStationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyTrainStation) updateTableName(table string) *dailyTrainStation {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Date = field.NewTime(table, "date")
	d.TrainCode = field.NewString(table, "train_code")
	d.Index = field.NewInt32(table, "index")
	d.Name = field.NewString(table, "name")
	d.NamePinyin = field.NewString(table, "name_pinyin")
	d.InTime = field.NewTime(table, "in_time")
	d.OutTime = field.NewTime(table, "out_time")
	d.StopTime = field.NewTime(table, "stop_time")
	d.Km = field.NewFloat64(table, "km")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")

	d.fillFieldMap()

	return d
}

func (d *dailyTrainStation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyTrainStation) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["date"] = d.Date
	d.fieldMap["train_code"] = d.TrainCode
	d.fieldMap["index"] = d.Index
	d.fieldMap["name"] = d.Name
	d.fieldMap["name_pinyin"] = d.NamePinyin
	d.fieldMap["in_time"] = d.InTime
	d.fieldMap["out_time"] = d.OutTime
	d.fieldMap["stop_time"] = d.StopTime
	d.fieldMap["km"] = d.Km
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
}

func (d dailyTrainStation) clone(db *gorm.DB) dailyTrainStation {
	d.dailyTrainStationDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyTrainStation) replaceDB(db *gorm.DB) dailyTrainStation {
	d.dailyTrainStationDo.ReplaceDB(db)
	return d
}

type dailyTrainStationDo struct{ gen.DO }

type IDailyTrainStationDo interface {
	gen.SubQuery
	Debug() IDailyTrainStationDo
	WithContext(ctx context.Context) IDailyTrainStationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyTrainStationDo
	WriteDB() IDailyTrainStationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyTrainStationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyTrainStationDo
	Not(conds ...gen.Condition) IDailyTrainStationDo
	Or(conds ...gen.Condition) IDailyTrainStationDo
	Select(conds ...field.Expr) IDailyTrainStationDo
	Where(conds ...gen.Condition) IDailyTrainStationDo
	Order(conds ...field.Expr) IDailyTrainStationDo
	Distinct(cols ...field.Expr) IDailyTrainStationDo
	Omit(cols ...field.Expr) IDailyTrainStationDo
	Join(table schema.Tabler, on ...field.Expr) IDailyTrainStationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainStationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainStationDo
	Group(cols ...field.Expr) IDailyTrainStationDo
	Having(conds ...gen.Condition) IDailyTrainStationDo
	Limit(limit int) IDailyTrainStationDo
	Offset(offset int) IDailyTrainStationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainStationDo
	Unscoped() IDailyTrainStationDo
	Create(values ...*model.DailyTrainStation) error
	CreateInBatches(values []*model.DailyTrainStation, batchSize int) error
	Save(values ...*model.DailyTrainStation) error
	First() (*model.DailyTrainStation, error)
	Take() (*model.DailyTrainStation, error)
	Last() (*model.DailyTrainStation, error)
	Find() ([]*model.DailyTrainStation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainStation, err error)
	FindInBatches(result *[]*model.DailyTrainStation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyTrainStation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyTrainStationDo
	Assign(attrs ...field.AssignExpr) IDailyTrainStationDo
	Joins(fields ...field.RelationField) IDailyTrainStationDo
	Preload(fields ...field.RelationField) IDailyTrainStationDo
	FirstOrInit() (*model.DailyTrainStation, error)
	FirstOrCreate() (*model.DailyTrainStation, error)
	FindByPage(offset int, limit int) (result []*model.DailyTrainStation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyTrainStationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyTrainStationDo) Debug() IDailyTrainStationDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyTrainStationDo) WithContext(ctx context.Context) IDailyTrainStationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyTrainStationDo) ReadDB() IDailyTrainStationDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyTrainStationDo) WriteDB() IDailyTrainStationDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyTrainStationDo) Session(config *gorm.Session) IDailyTrainStationDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyTrainStationDo) Clauses(conds ...clause.Expression) IDailyTrainStationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyTrainStationDo) Returning(value interface{}, columns ...string) IDailyTrainStationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyTrainStationDo) Not(conds ...gen.Condition) IDailyTrainStationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyTrainStationDo) Or(conds ...gen.Condition) IDailyTrainStationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyTrainStationDo) Select(conds ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyTrainStationDo) Where(conds ...gen.Condition) IDailyTrainStationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyTrainStationDo) Order(conds ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyTrainStationDo) Distinct(cols ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyTrainStationDo) Omit(cols ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyTrainStationDo) Join(table schema.Tabler, on ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyTrainStationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyTrainStationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyTrainStationDo) Group(cols ...field.Expr) IDailyTrainStationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyTrainStationDo) Having(conds ...gen.Condition) IDailyTrainStationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyTrainStationDo) Limit(limit int) IDailyTrainStationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyTrainStationDo) Offset(offset int) IDailyTrainStationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyTrainStationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyTrainStationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyTrainStationDo) Unscoped() IDailyTrainStationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyTrainStationDo) Create(values ...*model.DailyTrainStation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyTrainStationDo) CreateInBatches(values []*model.DailyTrainStation, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyTrainStationDo) Save(values ...*model.DailyTrainStation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyTrainStationDo) First() (*model.DailyTrainStation, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainStation), nil
	}
}

func (d dailyTrainStationDo) Take() (*model.DailyTrainStation, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainStation), nil
	}
}

func (d dailyTrainStationDo) Last() (*model.DailyTrainStation, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainStation), nil
	}
}

func (d dailyTrainStationDo) Find() ([]*model.DailyTrainStation, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyTrainStation), err
}

func (d dailyTrainStationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyTrainStation, err error) {
	buf := make([]*model.DailyTrainStation, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyTrainStationDo) FindInBatches(result *[]*model.DailyTrainStation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyTrainStationDo) Attrs(attrs ...field.AssignExpr) IDailyTrainStationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyTrainStationDo) Assign(attrs ...field.AssignExpr) IDailyTrainStationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyTrainStationDo) Joins(fields ...field.RelationField) IDailyTrainStationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyTrainStationDo) Preload(fields ...field.RelationField) IDailyTrainStationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyTrainStationDo) FirstOrInit() (*model.DailyTrainStation, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainStation), nil
	}
}

func (d dailyTrainStationDo) FirstOrCreate() (*model.DailyTrainStation, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyTrainStation), nil
	}
}

func (d dailyTrainStationDo) FindByPage(offset int, limit int) (result []*model.DailyTrainStation, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyTrainStationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyTrainStationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyTrainStationDo) Delete(models ...*model.DailyTrainStation) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyTrainStationDo) withDO(do gen.Dao) *dailyTrainStationDo {
	d.DO = *do.(*gen.DO)
	return d
}
