// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gotrains/train_srvs/train_srv/model"
)

func newTrainStation(db *gorm.DB, opts ...gen.DOOption) trainStation {
	_trainStation := trainStation{}

	_trainStation.trainStationDo.UseDB(db, opts...)
	_trainStation.trainStationDo.UseModel(&model.TrainStation{})

	tableName := _trainStation.trainStationDo.TableName()
	_trainStation.ALL = field.NewAsterisk(tableName)
	_trainStation.ID = field.NewInt64(tableName, "id")
	_trainStation.TrainCode = field.NewString(tableName, "train_code")
	_trainStation.Index = field.NewInt32(tableName, "index")
	_trainStation.Name = field.NewString(tableName, "name")
	_trainStation.NamePinyin = field.NewString(tableName, "name_pinyin")
	_trainStation.InTime = field.NewTime(tableName, "in_time")
	_trainStation.OutTime = field.NewTime(tableName, "out_time")
	_trainStation.StopTime = field.NewTime(tableName, "stop_time")
	_trainStation.Km = field.NewFloat64(tableName, "km")
	_trainStation.CreateTime = field.NewTime(tableName, "create_time")
	_trainStation.UpdateTime = field.NewTime(tableName, "update_time")

	_trainStation.fillFieldMap()

	return _trainStation
}

type trainStation struct {
	trainStationDo

	ALL        field.Asterisk
	ID         field.Int64   // id
	TrainCode  field.String  // 车次编号
	Index      field.Int32   // 站序
	Name       field.String  // 站名
	NamePinyin field.String  // 站名拼音
	InTime     field.Time    // 进站时间
	OutTime    field.Time    // 出站时间
	StopTime   field.Time    // 停站时长
	Km         field.Float64 // 里程（公里）|从上一站到本站的距离
	CreateTime field.Time    // 新增时间
	UpdateTime field.Time    // 修改时间

	fieldMap map[string]field.Expr
}

func (t trainStation) Table(newTableName string) *trainStation {
	t.trainStationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trainStation) As(alias string) *trainStation {
	t.trainStationDo.DO = *(t.trainStationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trainStation) updateTableName(table string) *trainStation {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TrainCode = field.NewString(table, "train_code")
	t.Index = field.NewInt32(table, "index")
	t.Name = field.NewString(table, "name")
	t.NamePinyin = field.NewString(table, "name_pinyin")
	t.InTime = field.NewTime(table, "in_time")
	t.OutTime = field.NewTime(table, "out_time")
	t.StopTime = field.NewTime(table, "stop_time")
	t.Km = field.NewFloat64(table, "km")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *trainStation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trainStation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["train_code"] = t.TrainCode
	t.fieldMap["index"] = t.Index
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_pinyin"] = t.NamePinyin
	t.fieldMap["in_time"] = t.InTime
	t.fieldMap["out_time"] = t.OutTime
	t.fieldMap["stop_time"] = t.StopTime
	t.fieldMap["km"] = t.Km
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t trainStation) clone(db *gorm.DB) trainStation {
	t.trainStationDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trainStation) replaceDB(db *gorm.DB) trainStation {
	t.trainStationDo.ReplaceDB(db)
	return t
}

type trainStationDo struct{ gen.DO }

type ITrainStationDo interface {
	gen.SubQuery
	Debug() ITrainStationDo
	WithContext(ctx context.Context) ITrainStationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrainStationDo
	WriteDB() ITrainStationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrainStationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrainStationDo
	Not(conds ...gen.Condition) ITrainStationDo
	Or(conds ...gen.Condition) ITrainStationDo
	Select(conds ...field.Expr) ITrainStationDo
	Where(conds ...gen.Condition) ITrainStationDo
	Order(conds ...field.Expr) ITrainStationDo
	Distinct(cols ...field.Expr) ITrainStationDo
	Omit(cols ...field.Expr) ITrainStationDo
	Join(table schema.Tabler, on ...field.Expr) ITrainStationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrainStationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrainStationDo
	Group(cols ...field.Expr) ITrainStationDo
	Having(conds ...gen.Condition) ITrainStationDo
	Limit(limit int) ITrainStationDo
	Offset(offset int) ITrainStationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainStationDo
	Unscoped() ITrainStationDo
	Create(values ...*model.TrainStation) error
	CreateInBatches(values []*model.TrainStation, batchSize int) error
	Save(values ...*model.TrainStation) error
	First() (*model.TrainStation, error)
	Take() (*model.TrainStation, error)
	Last() (*model.TrainStation, error)
	Find() ([]*model.TrainStation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainStation, err error)
	FindInBatches(result *[]*model.TrainStation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TrainStation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrainStationDo
	Assign(attrs ...field.AssignExpr) ITrainStationDo
	Joins(fields ...field.RelationField) ITrainStationDo
	Preload(fields ...field.RelationField) ITrainStationDo
	FirstOrInit() (*model.TrainStation, error)
	FirstOrCreate() (*model.TrainStation, error)
	FindByPage(offset int, limit int) (result []*model.TrainStation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrainStationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trainStationDo) Debug() ITrainStationDo {
	return t.withDO(t.DO.Debug())
}

func (t trainStationDo) WithContext(ctx context.Context) ITrainStationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trainStationDo) ReadDB() ITrainStationDo {
	return t.Clauses(dbresolver.Read)
}

func (t trainStationDo) WriteDB() ITrainStationDo {
	return t.Clauses(dbresolver.Write)
}

func (t trainStationDo) Session(config *gorm.Session) ITrainStationDo {
	return t.withDO(t.DO.Session(config))
}

func (t trainStationDo) Clauses(conds ...clause.Expression) ITrainStationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trainStationDo) Returning(value interface{}, columns ...string) ITrainStationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trainStationDo) Not(conds ...gen.Condition) ITrainStationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trainStationDo) Or(conds ...gen.Condition) ITrainStationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trainStationDo) Select(conds ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trainStationDo) Where(conds ...gen.Condition) ITrainStationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trainStationDo) Order(conds ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trainStationDo) Distinct(cols ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trainStationDo) Omit(cols ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trainStationDo) Join(table schema.Tabler, on ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trainStationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trainStationDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trainStationDo) Group(cols ...field.Expr) ITrainStationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trainStationDo) Having(conds ...gen.Condition) ITrainStationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trainStationDo) Limit(limit int) ITrainStationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trainStationDo) Offset(offset int) ITrainStationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trainStationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrainStationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trainStationDo) Unscoped() ITrainStationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trainStationDo) Create(values ...*model.TrainStation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trainStationDo) CreateInBatches(values []*model.TrainStation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trainStationDo) Save(values ...*model.TrainStation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trainStationDo) First() (*model.TrainStation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainStation), nil
	}
}

func (t trainStationDo) Take() (*model.TrainStation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainStation), nil
	}
}

func (t trainStationDo) Last() (*model.TrainStation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainStation), nil
	}
}

func (t trainStationDo) Find() ([]*model.TrainStation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TrainStation), err
}

func (t trainStationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrainStation, err error) {
	buf := make([]*model.TrainStation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trainStationDo) FindInBatches(result *[]*model.TrainStation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trainStationDo) Attrs(attrs ...field.AssignExpr) ITrainStationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trainStationDo) Assign(attrs ...field.AssignExpr) ITrainStationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trainStationDo) Joins(fields ...field.RelationField) ITrainStationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trainStationDo) Preload(fields ...field.RelationField) ITrainStationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trainStationDo) FirstOrInit() (*model.TrainStation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainStation), nil
	}
}

func (t trainStationDo) FirstOrCreate() (*model.TrainStation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrainStation), nil
	}
}

func (t trainStationDo) FindByPage(offset int, limit int) (result []*model.TrainStation, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trainStationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trainStationDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trainStationDo) Delete(models ...*model.TrainStation) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trainStationDo) withDO(do gen.Dao) *trainStationDo {
	t.DO = *do.(*gen.DO)
	return t
}
