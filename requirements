#!/bin/bash


oldIFS=$IFS
IFS=$'\n';
pattern='(\S+)\s+(\S+)'
interface="wlan0"
if [[ -n "$1" ]]; then
  interface="$1"
fi
ip=$(ifconfig "$interface" | grep -oP '(?<=inet\s)\d+(\.\d+){3}')

declare -A docker_cmd=(
  ['hashicorp/consul']='docker run -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600/udp  hashicorp/consul consul agent  -dev -client=0.0.0.0'
  [redis]='docker run --name redis -p 6379:6379 -d redis:7.0'
  [mysql]='docker run --name gorm -p 3306:3306 -v /home/liuzehao/docker/mysql/gorm/log:/var/log/mysql -v /home/liuzehao/docker/mysql/gorm/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=lzh --ulimit nofile=262144:262144 -d mysql:5.7'
  ['nacos/nacos-server']='docker run --name nacos-standalone -e MODE=standalone -e JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m -p 9848:9848 -p 8848:8848 -d nacos/nacos-server:latest'
  # 需要在/usr/share/elasticsearch/config/elasticsearch.yml中添加如下配置
  # http.host: 0.0.0.0
  # xpack.security.enabled: false
  # ['docker.elastic.co/elasticsearch/elasticsearch']="docker run --name es01 -e 'discovery.type=single-node' -p 9300:9300 -p 9200:9200 -v $HOME/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v $HOME/docker/elasticsearch/data:/usr/share/elasticsearch/data -v $HOME/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins -d docker.elastic.co/elasticsearch/elasticsearch:8.9.0"
  # ['docker.elastic.co/kibana/kibana']="docker run --name kib-01 -e ELASTICSEARCH_HOSTS='http://$ip:9200' -p 5601:5601 -d docker.elastic.co/kibana/kibana:8.9.0"
)

mapfile -t array_up_on < <(docker ps | awk 'BEGIN{FS=":"}NR > 1{print $1}')
mapfile -t array_annoy < <(docker ps -qa)
if [[ ${#array_up_on[@]} -eq 0 && ${#array_annoy[@]} -eq 0 ]]; then
  docker rm -f "$(docker ps -qa)"
  echo -e "\e[1;32mstarting new \e[0m..."
  for container in "${!docker_cmd[@]}"
  do
    eval "${docker_cmd[$container]}"
  done
  docker ps
  exit 0
fi
if [[ ${#array_up_on[@]} -eq ${#array_annoy[@]} ]]; then
  docker ps
  echo -e "\e[1;32mDone\e[0m"
else
  for container in $(docker ps -a | awk 'BEGIN{FS=":"}NR > 1{print $1}')
  do
    [[ "$container" =~ $pattern ]]
    imageId="${BASH_REMATCH[1]}"
    image="${BASH_REMATCH[2]}"
    if [[ ${array_up_on[*]##"$imageId"} != "${array_up_on[*]}" ]]; then
      continue
    fi
    docker rm -f "$imageId"
    echo -e "\e[1;31mRemoved old\e[0m: \e[1;33m$imageId $image\e[0m"
    echo -e "\e[1;32mstarting new \e[0m..."
    eval "${docker_cmd[$image]}"
  done
  docker ps
fi

IFS=$oldIFS
